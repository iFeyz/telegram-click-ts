version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: telegram-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-telegram_bot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-telegram_password}
      POSTGRES_DB: ${POSTGRES_DB:-telegram_bot_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-telegram_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bot-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Telegram
      BOT_TOKEN: ${BOT_TOKEN}
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-telegram_bot}:${POSTGRES_PASSWORD:-telegram_password}@postgres:5432/${POSTGRES_DB:-telegram_bot_db}?schema=public
      
      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_DB: ${REDIS_DB:-0}
      
      # App Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${APP_PORT:-3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Rate Limiting
      MAX_CLICKS_PER_SECOND: ${MAX_CLICKS_PER_SECOND:-10}
      RATE_LIMIT_WINDOW_SECONDS: ${RATE_LIMIT_WINDOW_SECONDS:-1}
      
      # Batch Processing
      BATCH_SAVE_INTERVAL_MS: ${BATCH_SAVE_INTERVAL_MS:-5000}
      BATCH_SIZE: ${BATCH_SIZE:-100}
      
      # Leaderboard
      LEADERBOARD_UPDATE_INTERVAL_MS: ${LEADERBOARD_UPDATE_INTERVAL_MS:-500}
      LEADERBOARD_SIZE: ${LEADERBOARD_SIZE:-100}
      
      # Session
      SESSION_TIMEOUT_MS: ${SESSION_TIMEOUT_MS:-3600000}
      
      # Worker
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
      WORKER_MAX_RETRIES: ${WORKER_MAX_RETRIES:-3}
    networks:
      - telegram-network
    volumes:
      # For logs (optional)
      - ./logs:/app/logs

    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'node dist/index.js' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  telegram-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

